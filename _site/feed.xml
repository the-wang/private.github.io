<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>执着的路-that-wang</title>
    <description></description>
    <link>http://the-wang.github.io/</link>
    <atom:link href="http://the-wang.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 23 Oct 2018 03:54:38 +0000</pubDate>
    <lastBuildDate>Tue, 23 Oct 2018 03:54:38 +0000</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>做了一个有意思的梦</title>
        <description>&lt;p&gt;梦见天空分成了两半，一半晴天一半夜晚。夜晚的那半宇宙好像近在眼前，色彩斑斓，像一张无边无际的大网，不同的色块填充在星星之间，深邃又迷离。&lt;/p&gt;

&lt;p&gt;梦中的环境充满了动荡与不安，危机四伏，主角竟是高中一个娇小可爱的女同学-张琦，梦中忍不住的靠近她，想要保护她，互生暧昧又心照不宣，在充满危机的环境下守护一方温暖的小天地。&lt;/p&gt;

&lt;p&gt;好奇怪为什么会梦见她，可能是最近太缺少成就感，也缺少安全感吧。不过话说回来这个梦还是挺温馨的，以至于不想醒来。现在想想，学生时代没有谈一次无忧无虑纯真的爱情，是个一生的遗憾吧。时不再来，这么一步步走来，我竟要有孩子了。&lt;/p&gt;

&lt;p&gt;我的孩子一定不要走我的路，要活出自己的生活，拥有纯真的爱情，抓住生活的真谛，不要浑浑噩噩的走下去。&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate>
        <link>http://the-wang.github.io/diary/%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E6%A2%A6/</link>
        <guid isPermaLink="true">http://the-wang.github.io/diary/%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E6%A2%A6/</guid>
        
        <category>dream</category>
        
        
        <category>diary</category>
        
      </item>
    
      <item>
        <title>乐观锁与悲观锁</title>
        <description>&lt;ul&gt;
  &lt;li&gt;乐观锁：当我需要操作目标资源时，&lt;strong&gt;乐观&lt;/strong&gt;的认为目标资源没有别人竞争，所以会直接操作，不需要提前占有该资源&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;悲观锁：当我需要操作目标资源时，为了防止别人的操作冲突，&lt;strong&gt;先占有&lt;/strong&gt;目标资源后再操作&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;乐观锁通常用版本机制（version字段或者updatetime）去操作对象，如果发现没有符合版本的目标资源，则可以进行重试（查新版本，用新版本更新）&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 22 Aug 2017 17:30:00 +0000</pubDate>
        <link>http://the-wang.github.io/db/%E4%B9%90%E8%A7%82%E9%94%81%E4%B8%8E%E6%82%B2%E8%A7%82%E9%94%81/</link>
        <guid isPermaLink="true">http://the-wang.github.io/db/%E4%B9%90%E8%A7%82%E9%94%81%E4%B8%8E%E6%82%B2%E8%A7%82%E9%94%81/</guid>
        
        <category>mysql</category>
        
        <category>db</category>
        
        
        <category>db</category>
        
      </item>
    
      <item>
        <title>成都2017年房地产市场调查</title>
        <description>&lt;h2 id=&quot;楼盘要看什么&quot;&gt;楼盘要看什么&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/29367761&quot;&gt;怎样快速了解一个楼盘&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;容积率&quot;&gt;容积率&lt;/h3&gt;
&lt;p&gt;容积率（Plot Ratio/Floor Area Ratio/Volume Fraction）又称建筑面积毛密度，是指一个小区的地上总建筑面积与用地面积的比率。对于开发商来说，容积率决定地价成本在房屋中占的比例，而对于住户来说，容积率直接涉及到居住的舒适度。一个良好的居住小区，高层住宅容积率应不超过5，多层住宅应不超过3，绿地率应不低于30%。&lt;/p&gt;

&lt;p&gt;现行城市规划法规体系下编制的各类居住用地的控制性详细规划，一般而言，容积率分为：
独立别墅为0.2~0.5,
联排别墅为0.4~0.7,
6层以下多层住宅为0.8~1.2,
11层小高层住宅为1.5~2.0,
18层高层住宅为1.8~2.5,
19层以上住宅为2.4~4.5,
住宅小区容积率小于1.0的，为非普通住宅。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在现在的大地块开发中，公开资料给的往往是总容积率，单纯的参考价值就少了很多。因为开发商会根据组合产品不同来分拆容积率，从而在不同产品上实现最大的利益。换言之，看到一个高容积率的项目，就要看实际的产品组合和推算分项容积率。在现在的大地块开发中，公开资料给的往往是总容积率，单纯的参考价值就少了很多。因为开发商会根据组合产品不同来分拆容积率，从而在不同产品上实现最大的利益。换言之，看到一个高容积率的项目，就要看实际的产品组合和推算分项容积率。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;绿化覆盖率绿地率&quot;&gt;绿化覆盖率&amp;amp;绿地率&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;绿化覆盖率：凡事绿色的都计入在内，包括一块草坪，无论土壤厚度&lt;/li&gt;
  &lt;li&gt;绿地率：要求较高，比如地下车库、化粪池等地下土壤厚度不足3米的不计入在内&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以，绿化覆盖率通常会比绿地率要高。&lt;/p&gt;

&lt;h2 id=&quot;城区及环境调查&quot;&gt;城区及环境调查&lt;/h2&gt;
&lt;h3 id=&quot;印象&quot;&gt;印象&lt;/h3&gt;
&lt;p&gt;中心城区以南，以北不考虑&lt;/p&gt;

&lt;h3 id=&quot;区域概念&quot;&gt;区域概念&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.360doc.com/content/17/0122/20/9063442_624215504.shtml&quot;&gt;天府新区 天府新区成都片区 天府新区成都直管区 天府新城&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;地铁规划&quot;&gt;地铁规划&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://weibo.com/ttarticle/p/show?id=2309404136717908065717&quot;&gt;地铁规划&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ditiezu.com/forum.php?mod=viewthread&amp;amp;tid=521126&amp;amp;ordertype=2&quot;&gt;地铁图（含规划）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1cAk894&quot;&gt;地铁图（含规划）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cd.bendibao.com/ditie/plan.shtml&quot;&gt;规划&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;参考因素考虑2-4年规划&quot;&gt;参考因素（考虑2-4年规划）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;交通: 火车站、机场、地铁&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;生活：基础设施、商场、医院&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;工作：就业机会、经济活力、发展趋势&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;教育：学校、划片&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;房地产&quot;&gt;房地产&lt;/h2&gt;

&lt;h3 id=&quot;武侯区&quot;&gt;武侯区&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;经济&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;交通&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;规划&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;高新区&quot;&gt;高新区&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;经济&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;交通&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;规划&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;锦江区&quot;&gt;锦江区&lt;/h3&gt;
&lt;h4 id=&quot;新楼盘&quot;&gt;新楼盘&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;xxx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;yyy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;旧小区&quot;&gt;旧小区&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;xxx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;yyy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;成华区&quot;&gt;成华区&lt;/h3&gt;
&lt;h4 id=&quot;新楼盘-1&quot;&gt;新楼盘&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;xxx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;yyy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;旧小区-1&quot;&gt;旧小区&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;xxx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;yyy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;青羊区&quot;&gt;青羊区&lt;/h3&gt;
&lt;h4 id=&quot;新楼盘-2&quot;&gt;新楼盘&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;xxx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;yyy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;旧小区-2&quot;&gt;旧小区&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;xxx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;yyy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;道听途说&quot;&gt;道听途说&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://baijiahao.baidu.com/s?id=1575452135426115&amp;amp;wfr=spider&amp;amp;for=pc&quot;&gt;秦皇帝锦&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://sc.leju.com/news/2017-04-11/17356257496061812989257.shtml&quot;&gt;2017一季度成都楼市&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/40370434?sort=created&quot;&gt;趋势&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Aug 2017 20:56:00 +0000</pubDate>
        <link>http://the-wang.github.io/estate/%E6%88%90%E9%83%BD%E6%88%BF%E5%9C%B0%E4%BA%A7%E8%B0%83%E6%9F%A5/</link>
        <guid isPermaLink="true">http://the-wang.github.io/estate/%E6%88%90%E9%83%BD%E6%88%BF%E5%9C%B0%E4%BA%A7%E8%B0%83%E6%9F%A5/</guid>
        
        <category>房地产</category>
        
        <category>房子</category>
        
        
        <category>estate</category>
        
      </item>
    
      <item>
        <title>API Driven Development with APIary.io</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;我们常见的开发方式主要是 TDD(Threat-Driven AppDevelopment) 和 BDD(Boss-Driven AppDevelopment)。&lt;/p&gt;

&lt;p&gt;TDD 的经典场景：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;产品：这个功能周一上面要验收，要不周末加加班吧。
程序员：好吧（CNM）
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;BDD 的经典场景：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;老板：你下周给我做一个类似微信的这个功能。
程序员：好的老板（CNM）
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;api-driven-development&quot;&gt;API Driven Development&lt;/h2&gt;

&lt;h3 id=&quot;从-api-文档开始&quot;&gt;从 API 文档开始&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://apiary.io/&quot;&gt;apiary.io&lt;/a&gt; 是使用 BluePrint 格式的一款文档工具，它支持实时预览功能。&lt;/p&gt;

&lt;p&gt;假设我们的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Blog&lt;/code&gt; API 项目只有 2 个服务接口，&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /article&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;POST /article&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-blueprint&quot;&gt;FORMAT: 1A

# blog

Blog is a simple API allowing consumers...

## Article Collection [/article]

### List All Articles [GET]

+ Response 200 (application/json)

        [
            {
                &quot;title&quot;: &quot;Article 1&quot;,
                &quot;content&quot;: &quot;content&quot;
            },
            {
                &quot;title&quot;: &quot;Article 2&quot;,
                &quot;content&quot;: &quot;content&quot;
            }
        ]

### Create a New Article [POST]

You may create your own article using this action. It takes a JSON
object containing...

+ Request (application/json)

        {
            &quot;title&quot;: &quot;My new post&quot;,
            &quot;content&quot;: &quot;new article content&quot;,
        }

+ Response 201 (application/json)

    + Body

            {
               &quot;status&quot;:&quot;created&quot;
            }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;创建-api-应用&quot;&gt;创建 API 应用&lt;/h3&gt;

&lt;p&gt;我们的目标是期望程序员实现的 API 和上面描述的文档一致。为了实现这个目标，需要引入 &lt;a href=&quot;https://github.com/apiaryio/dredd&quot;&gt;Dredd&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Dredd 是一个 HTTP API 测试框架。它会阅读你的 API 文档，然后验证你的 API 实现的响应是否和文档描述的一致。&lt;/p&gt;

&lt;p&gt;假设我们的文档地址是 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://jsapi.apiary.io/apis/blog41.apib&lt;/code&gt; 开发地址是 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://blog.dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在项目的根目录执行如下命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dredd https://jsapi.apiary.io/apis/blog41.apib http://blog.dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因为我们还没有实现任何 API 所以，返回的信息会是和文档描述的返回值一样，并提示 &lt;code class=&quot;highlighter-rouge&quot;&gt;complete: 0 passing, 2 failing, 0 errors, 0 skipped, 2 total&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*Lwwg-6KHJz5hJhnh7xfeoA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当你捅咕半天编辑器，然后实现了这两个 API 之后，再次运行这条命令，会返回成功提示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*tfq7p-06V2Pzyn-7r5WKJg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;有啥用&quot;&gt;有啥用？？？&lt;/h3&gt;

&lt;p&gt;你可以先跟客户端开发的兄弟，商议好 API 接口和返回值，然后用 apiary.io 提供的 mock server 让客户端跟服务端同步开发，而不用等你。&lt;/p&gt;

&lt;h2 id=&quot;相关&quot;&gt;相关&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://apievangelist.com/2014/11/21/there-are-four-api-design-editors-to-choose-from-now/&quot;&gt;There Are Four API Design Editors To Choose From Now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sendgrid.com/blog/quickly-prototype-apis-apiary/&quot;&gt;Quickly Prototype APIs with Apiary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apiblueprint.org/&quot;&gt;API Blueprint&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apiblueprint.org/documentation/tutorial.html&quot;&gt;API Blueprint Tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiaryio/api-blueprint/tree/master/examples&quot;&gt;API Blueprint examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dredd.readthedocs.io/en/latest/hooks-ruby/&quot;&gt;Writing Dredd Hooks In Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 25 Jun 2017 11:40:00 +0000</pubDate>
        <link>http://the-wang.github.io/tool/API-Driven-Development/</link>
        <guid isPermaLink="true">http://the-wang.github.io/tool/API-Driven-Development/</guid>
        
        <category>testing</category>
        
        
        <category>tool</category>
        
      </item>
    
      <item>
        <title>Marshal.dump and load with ActiveRecord</title>
        <description>&lt;h2 id=&quot;marshal&quot;&gt;Marshal&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Marshal.dump&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Marshal.load&lt;/code&gt; 可以把 Ruby 对象序列化为二进制数据。&lt;/p&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;p&gt;想在 Redis 中储存一个对象，并且想将来取出这个对象。&lt;/p&gt;

&lt;p&gt;一开始想到的办法：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 取出对象&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;json_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encrypted_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 储存对象&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encrypted_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encrypted_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样遇到的问题是，一旦要对 user 做一些关联性的操作，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;user.posts.create(xxx)&lt;/code&gt; 就会提示 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; 还没有保存。因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;from_json&lt;/code&gt; 方法确实是序列化了一个新对象出来，而不是取出原来的对象。虽然看起来各个属性值一样，但是没什么用。&lt;/p&gt;

&lt;p&gt;正确做法：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encrypted_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encrypted_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encrypted_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;PS: &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.parse(json_string, object_class: User)&lt;/code&gt; 也是不行的 ：）&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ruby-doc.org/core-1.9.3/Marshal.html&quot;&gt;Marshal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://keita.blog/2013/09/14/marshal-dump-and-load-with-activerecord/&quot;&gt;Marshal.dump and load with ActiveRecord&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mensfeld.pl/2014/01/ruby-rails-objects-serialization-marshal-mongoid-and-performance-matters/&quot;&gt;Ruby, Rails + objects serialization (Marshal), Mongoid and performance matters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 17 Jun 2017 11:40:00 +0000</pubDate>
        <link>http://the-wang.github.io/rails/redis-store-object/</link>
        <guid isPermaLink="true">http://the-wang.github.io/rails/redis-store-object/</guid>
        
        <category>tip</category>
        
        <category>caching</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Redis</title>
        <description>&lt;h2 id=&quot;基础&quot;&gt;基础&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Redis&lt;/strong&gt; 是一个开源免费的 &lt;code class=&quot;highlighter-rouge&quot;&gt;key-value&lt;/code&gt; 数据库。性能高，丰富的数据类型，所有操作都是原子性的，还支持 &lt;code class=&quot;highlighter-rouge&quot;&gt;publish/subscribe&lt;/code&gt;, 通知, key 过期等等特性。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;特点&quot;&gt;特点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。&lt;/li&gt;
  &lt;li&gt;提供 &lt;code class=&quot;highlighter-rouge&quot;&gt;list，set，zset，hash&lt;/code&gt; 等数据结构的存储。&lt;/li&gt;
  &lt;li&gt;支持数据的备份，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;master-slave&lt;/code&gt; 模式的数据备份。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;install&quot;&gt;Install&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install redis
&lt;span class=&quot;c&quot;&gt;# To have launchd start memcached at login:&lt;/span&gt;
ln -sfv /usr/local/opt/redis/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.plist ~/Library/LaunchAgents
&lt;span class=&quot;c&quot;&gt;# Then to load memcached now:&lt;/span&gt;
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist

&lt;span class=&quot;c&quot;&gt;# Best way is `brew services`&lt;/span&gt;
brew services start redis

&lt;span class=&quot;c&quot;&gt;# Start Redis server via “launchctl”.&lt;/span&gt;
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist
&lt;span class=&quot;c&quot;&gt;# Start Redis server using configuration file.&lt;/span&gt;
redis-server /usr/local/etc/redis.conf
&lt;span class=&quot;c&quot;&gt;# Stop Redis on autostart on computer start.&lt;/span&gt;
launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.redis.plist
&lt;span class=&quot;c&quot;&gt;# Location of Redis configuration file.&lt;/span&gt;
/usr/local/etc/redis.conf
&lt;span class=&quot;c&quot;&gt;# Get Redis package information.&lt;/span&gt;
brew info redis
&lt;span class=&quot;c&quot;&gt;# Test if Redis server is running. If it replies “PONG”, then it’s good to go!&lt;/span&gt;
redis-cli ping
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;配置&quot;&gt;配置&lt;/h3&gt;

&lt;p&gt;Redis 的配置文件位于 Redis 安装目录下，文件名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;redis.conf&lt;/code&gt;。你可以通过 CONFIG 命令查看或设置配置项。各配置项的说明可以参考&lt;a href=&quot;http://www.redis.net.cn/tutorial/3504.html&quot;&gt;Redis 配置&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;需要注意的是 Redis 默认不是以守护进程的方式运行，可以通过该配置项修改。&lt;/p&gt;

&lt;h3 id=&quot;redis-命令&quot;&gt;Redis 命令&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;redis-cli
redis-cli -h host -p port -a password
INFO &lt;span class=&quot;c&quot;&gt;# 获取 redis 服务器的统计信息&lt;/span&gt;
PING &lt;span class=&quot;c&quot;&gt;# 查看服务是否运行&lt;/span&gt;
QUIT &lt;span class=&quot;c&quot;&gt;# 关闭当前连接&lt;/span&gt;
SELECT index &lt;span class=&quot;c&quot;&gt;# 切换到指定的数据库&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SET w3ckey redis
DEL w3ckey
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DEL&lt;/code&gt; 是一个命令，&lt;code class=&quot;highlighter-rouge&quot;&gt;w3ckey&lt;/code&gt; 是一个键。 如果键被删除成功，命令执行后输出 (integer) 1，否则将输出 (integer) 0&lt;/p&gt;

&lt;h2 id=&quot;redis-数据类型&quot;&gt;Redis 数据类型&lt;/h2&gt;

&lt;p&gt;Redis 支持五种数据类型：&lt;code class=&quot;highlighter-rouge&quot;&gt;string，hash，list，set，zset&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;string&quot;&gt;String&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;redis 最基本的类型，可以理解成与 Memcached 一样的类型，一个 key 对应一个 value。&lt;/li&gt;
  &lt;li&gt;二进制安全的，可以包含任何数据。比如：jpg图片或者序列化的对象。&lt;/li&gt;
  &lt;li&gt;一个键最大能存储 512MB。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SET w3ckey redis
GET w3ckey
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;hash&quot;&gt;Hash&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;键值对集合，是 string 类型的 field 和 value 的映射表&lt;/li&gt;
  &lt;li&gt;特别适合用于存储对象&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HMSET w3ckey name &lt;span class=&quot;s2&quot;&gt;&quot;redis tutorial&quot;&lt;/span&gt; description &lt;span class=&quot;s2&quot;&gt;&quot;redis basic commands for caching&quot;&lt;/span&gt; likes 20 visitors 23000
HGETALL w3ckey
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;list&quot;&gt;List&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LPUSH w3ckey redis
LPUSH w3ckey mongodb
LRANGE w3ckey 0 10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;set&quot;&gt;Set&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Set 是 string 类型的无序集合&lt;/li&gt;
  &lt;li&gt;集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SADD w3ckey redis
SADD w3ckey mongodb
SADD w3ckey redis
SMEMBERS w3ckey
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;zset&quot;&gt;zset&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;zset 和 set 一样也是 string 类型元素的集合，且不允许重复的成员。&lt;/li&gt;
  &lt;li&gt;不同的是每个元素都会关联一个 double 类型的分数。redis 通过分数来为集合中的成员进行从小到大的排序。&lt;/li&gt;
  &lt;li&gt;zset 的成员是唯一的，但分数 score 却可以重复。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ZADD w3ckey 1 redis
ZADD w3ckey 2 mongodb
ZADD w3ckey 3 mysql
ZADD w3ckey 3 mysql
ZRANGE w3ckey 0 10 WITHSCORES
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;hyperloglog&quot;&gt;HyperLogLog&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;HyperLogLog 是用来做基数统计的算法，在数学上，基数是集合论中刻画任意集合大小的一个概念。&lt;/li&gt;
  &lt;li&gt;HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。&lt;/li&gt;
  &lt;li&gt;因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PFADD w3ckey &lt;span class=&quot;s2&quot;&gt;&quot;redis&quot;&lt;/span&gt;
PFADD w3ckey &lt;span class=&quot;s2&quot;&gt;&quot;mongodb&quot;&lt;/span&gt;
PFADD w3ckey &lt;span class=&quot;s2&quot;&gt;&quot;mysql&quot;&lt;/span&gt;
PFCOUNT w3ckey
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;高级&quot;&gt;高级&lt;/h2&gt;

&lt;h3 id=&quot;发布订阅&quot;&gt;发布订阅&lt;/h3&gt;

&lt;p&gt;创建了订阅频道名为 redisChat:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SUBSCRIBE redisChat
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;新打开一个 redis 客户端，在同一个频道 redisChat 发布两次消息，订阅者就能接收到消息。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PUBLISH redisChat &lt;span class=&quot;s2&quot;&gt;&quot;Redis is a great caching technique&quot;&lt;/span&gt;
PUBLISH redisChat &lt;span class=&quot;s2&quot;&gt;&quot;Learn redis by w3cschool.cc&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;事务&quot;&gt;事务&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。&lt;/li&gt;
  &lt;li&gt;事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。&lt;/li&gt;
  &lt;li&gt;事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个事务从开始到执行会经历以下三个阶段：开始事务 -&amp;gt; 命令入队 -&amp;gt; 执行事务。&lt;/p&gt;

&lt;p&gt;以下是一个事务的例子， 它先以 MULTI 开始一个事务， 然后将多个命令入队到事务中， 最后由 EXEC 命令触发事务， 一并执行事务中的所有命令：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MULTI
SET book-name &lt;span class=&quot;s2&quot;&gt;&quot;Mastering C++ in 21 days&quot;&lt;/span&gt;
GET book-name
SADD tag &lt;span class=&quot;s2&quot;&gt;&quot;C++&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Programming&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Mastering Series&quot;&lt;/span&gt;
SMEMBERS tag
EXEC
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;管道技术&quot;&gt;管道技术&lt;/h3&gt;

&lt;p&gt;通常情况下一个请求会遵循以下步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。&lt;/li&gt;
  &lt;li&gt;服务端处理命令，并将结果返回给客户端。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Redis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。&lt;/p&gt;

&lt;p&gt;管道技术最显著的优势是提高了 Redis 服务的性能。&lt;/p&gt;

&lt;p&gt;Redis 的 Ruby 客户端，支持管道技术特性。&lt;/p&gt;

&lt;h2 id=&quot;其它&quot;&gt;其它&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.redis.net.cn/tutorial/3519.html&quot;&gt;备份与恢复&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.redis.net.cn/tutorial/3520.html&quot;&gt;安全&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.redis.net.cn/tutorial/3524.html&quot;&gt;分区&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.redis.net.cn/tutorial/3518.html&quot;&gt;Redis 服务器命令&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 13 Jun 2017 11:40:00 +0000</pubDate>
        <link>http://the-wang.github.io/tool/redis/</link>
        <guid isPermaLink="true">http://the-wang.github.io/tool/redis/</guid>
        
        <category>mac</category>
        
        <category>caching</category>
        
        
        <category>tool</category>
        
      </item>
    
      <item>
        <title>Form Object</title>
        <description>&lt;h3 id=&quot;什么是-form-object&quot;&gt;什么是 Form Object&lt;/h3&gt;

&lt;p&gt;封装了一个表单对象的 Ruby 类。&lt;/p&gt;

&lt;h3 id=&quot;何时使用-form-object&quot;&gt;何时使用 Form Object&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;需要在一个表单中更新多个 ActiveRecord 模型，这比使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;accepts_nested_attributes_for&lt;/code&gt; 要好的多。&lt;/li&gt;
  &lt;li&gt;提交的数据不需要持久化。&lt;/li&gt;
  &lt;li&gt;创建一个没有数据库模型支持的表单。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如修改密码，找回密码，登录，注册之类的表单。而根据复杂度不同，可能这些 From Object 又会去调用 Service Object。&lt;/p&gt;

&lt;h3 id=&quot;form-object-和-service-object-的区别&quot;&gt;Form Object 和 Service Object 的区别&lt;/h3&gt;

&lt;p&gt;代码和功能上没啥区别，只有在抽象哲学层面有点不同。Form Object 是抽象出来提供给 HTML 表单用的。&lt;/p&gt;

&lt;h3 id=&quot;例子&quot;&gt;例子&lt;/h3&gt;

&lt;p&gt;下面是一个正常的例子。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Signup&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Virtus&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Naming&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Conversion&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Validations&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:company&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:company_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;presence: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# … more validations …&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Forms are never themselves persisted&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;persisted?&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;persist!&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;persist!&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;company_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SignupsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@signup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Signup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:signup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@signup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dashboard_path&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;new&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果表单中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;persist!&lt;/code&gt; 逻辑太复杂，您可以将此方法与 &lt;code class=&quot;highlighter-rouge&quot;&gt;Service Object&lt;/code&gt; 组合。由于 validation 的逻辑通常是关联上下文的，因此可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Form Object&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;Service Object&lt;/code&gt; 中进行定义，而不需要在 ActiveRecord model 中定义 validate。&lt;/p&gt;

&lt;p&gt;但是这并不意味着，model 里面一个验证都没有。应该把核心的验证逻辑放在 model 中。比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; 模型中应该保留 &lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt; 唯一性的验证。&lt;/p&gt;

&lt;h2 id=&quot;form-object-with-active_type&quot;&gt;Form Object with active_type&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Let your form inherit from ApplicationForm&lt;/li&gt;
  &lt;li&gt;Put your forms in &lt;code class=&quot;highlighter-rouge&quot;&gt;app/forms/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;文件以 form 结尾并能描述出功能。例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;app/forms/admins/change_password_form.rb&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;initialize always requires a model that the form represents.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#sync&lt;/code&gt; writes form data back to the model and nested models. This will only use setter methods on the model(s).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;例子-1&quot;&gt;例子&lt;/h3&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/forms/application_form.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;abstract_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:form_object&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:form_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;presence: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;validate&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_form_object_class_correct&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;after_save&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sync&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sync&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NotImplementedError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Must be implemented by subtypes.'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# NOTE: can implemented by subtypes.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;form_object_class&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/\A([^:]+)/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;singularize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constantize&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Could not determine form class from &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;verify_form_object_class_correct&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:form_object_class_incorrect&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form_object_class&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/forms/admins/password_form.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Admins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PasswordForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationForm&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:password_confirmation&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;confirmation: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sync&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;form_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;password: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Admins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PasswordsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:load_admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:build_password_form&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@password_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admins_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;notice: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Admin password was successfully updated.'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:edit&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_admin&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@admin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:admin_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build_password_form&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@password_form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Admins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PasswordForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;form_object: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@password_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form_params&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;form_params&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;form_params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:admins_password_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;form_params&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;permit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:password_confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/416-form-objects&quot;&gt;#416 Form Objects pro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cucumbersome.net/2016/09/06/rails-form-objects-with-dry-rb.html&quot;&gt;Rails Form Objects With dry-rb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stratus3d.com/blog/2015/04/04/extensible-rails-4-form-object-design/&quot;&gt;Extensible Rails 4 Form Object Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/trailblazer/reform&quot;&gt;Reform gem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/timcraft/formeze&quot;&gt;formeze gem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 11 Jun 2017 11:30:00 +0000</pubDate>
        <link>http://the-wang.github.io/rails/form-object/</link>
        <guid isPermaLink="true">http://the-wang.github.io/rails/form-object/</guid>
        
        <category>refactoring</category>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Agile tools for kanban</title>
        <description>&lt;h2 id=&quot;kanban&quot;&gt;Kanban&lt;/h2&gt;

&lt;p&gt;Kanban 方式是基于持续发布的想法。通过 board 的 columns 和 lanes 的状态来跟踪工作进度。kanban 通过 4 个支柱来帮助团队发布产品：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;持续发布 continuous releases&lt;/li&gt;
  &lt;li&gt;限制进行中的任务 WIP(work in progress)&lt;/li&gt;
  &lt;li&gt;工作列表 the list of work&lt;/li&gt;
  &lt;li&gt;columns 或 lanes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;features-for-kanban&quot;&gt;Features for kanban&lt;/h2&gt;

&lt;p&gt;看板的一个好处是，你的团队几乎没有学习成本。JIRA 默认就提供相关的工作流程，让你方便的创建 kanban board，添加一些 issues 或 user stories。一旦你的团队习惯了 board，你可以开始自定义项目、工作流程、issue 类型，以满足团队的需求。下面介绍一些 JIRA 提供的功能。&lt;/p&gt;

&lt;h3 id=&quot;story-cards&quot;&gt;Story cards&lt;/h3&gt;

&lt;p&gt;Board 将显示每个 story、issue、bug 或 task 中的相关信息。点击它们可以查看所有细节，包括相关源码和 pull requests、优先级，注释，附件等。&lt;/p&gt;

&lt;h3 id=&quot;wip-limit-configuration&quot;&gt;WIP limit configuration&lt;/h3&gt;

&lt;p&gt;限制每个状态的用户故事的数量。它对于防止某些特别的状态称为项目中的瓶颈，确保整个工作流程的顺利十分重要。&lt;/p&gt;

&lt;h3 id=&quot;swimlanes-and-columns&quot;&gt;Swimlanes and columns&lt;/h3&gt;

&lt;p&gt;配置列以表示工作流的状态。例如 “To Do”，“In Progress” 和 “Done”。 Add swimlanes to group work into streams by epics, assignees, or projects or whatever makes sense for your team.&lt;/p&gt;

&lt;h3 id=&quot;flexible-workflows&quot;&gt;Flexible workflows&lt;/h3&gt;

&lt;p&gt;可以根据需要定义和配置不同的工作流和 issue 类型，或者所有 board 使用相同的 issue 类型。你想咋搞就咋搞。&lt;/p&gt;

&lt;h3 id=&quot;kanban-board&quot;&gt;Kanban board&lt;/h3&gt;

&lt;p&gt;Kanban board 让团队知道下一步干啥。一个工作（item or card）完成后，团队可以立刻搞下一个。&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Jun 2017 11:30:00 +0000</pubDate>
        <link>http://the-wang.github.io/other/Agile-tools-for-kanban/</link>
        <guid isPermaLink="true">http://the-wang.github.io/other/Agile-tools-for-kanban/</guid>
        
        <category>scrum</category>
        
        
        <category>other</category>
        
      </item>
    
      <item>
        <title>如何写好 Use Case</title>
        <description>&lt;h2 id=&quot;use-case-入门&quot;&gt;Use Case 入门&lt;/h2&gt;

&lt;h3 id=&quot;什么是-use-case&quot;&gt;什么是 Use Case&lt;/h3&gt;

&lt;p&gt;Use Case 是一种在开发新系统或者软件改造时捕获潜在需求的技术。每个用例提供了一个或多个场景，该场景揭示了系统是如何同最终用户或其它系统交互的，从而获得一个明确的业务目标。&lt;strong&gt;它描述的是一个操作，而不是一个功能。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;为什么需要--use-case&quot;&gt;为什么需要  Use Case&lt;/h3&gt;

&lt;p&gt;传统的软件模型设计喜欢在需求分析把业务分解成功能模块，这样的弊端就是混淆了需求和设计的界限，因为功能模块的划分牵涉到系统的概要设计。&lt;/p&gt;

&lt;p&gt;与功能模块不同的是，用例不是站在开发者的角度，而是站在用户的角度来分解系统，因为用户并不想了解系统的内部结构和设计，他们关心的是系统的服务，即系统是如何去操作的，这就是用例的基本思想。&lt;/p&gt;

&lt;h2 id=&quot;和-user-story-的区别&quot;&gt;和 User Story 的区别&lt;/h2&gt;

&lt;p&gt;User Story 描述对用户或客户有价值的功能，只是需求描述，而不是详细的需求规范。
Use Case 在不展现一个系统或子系统内部结构的情况下，对系统或子系统的某个连贯的功能单元的定义和描述。&lt;/p&gt;

&lt;h2 id=&quot;如何书写-use-case&quot;&gt;如何书写 Use Case&lt;/h2&gt;

&lt;p&gt;用例描述文档的书写是系统分析人员对用户需求的深刻理解的体现。是后期时序图和实际开发的重要依据。也可以对作为项目估算的依据。&lt;strong&gt;要避免技术术语，取而代之的是最终用户或者领域专家的语言。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;use-case-文档前的准备&quot;&gt;Use Case 文档前的准备&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;对用户的问题要有非常深刻完善的理解&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-case-文档的目标&quot;&gt;Use Case 文档的目标&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;确保能够解决用户的所有问题&lt;/li&gt;
  &lt;li&gt;把用户的需求真正地反应到商业模型&lt;/li&gt;
  &lt;li&gt;对以后的设计和开发过程提供说明和框架&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-case-文档的内容模板&quot;&gt;Use Case 文档的内容模板&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;首先有用例名称：一般是模块名称或者模块中功能点的名称。&lt;/li&gt;
  &lt;li&gt;其次文档变更记录(Revision History) - 包含 Date, Version, Description, Author。&lt;/li&gt;
  &lt;li&gt;本文部分包含如下：
    &lt;ol&gt;
      &lt;li&gt;基本描述(Brief Description) - 简要介绍该用例的作用和目的。比如此用例的使用者是谁、使用者所要做的操作。&lt;/li&gt;
      &lt;li&gt;前置条件(Pre-Condition) - 描述该用例执行前所要满足的条件和系统必须所处的状态。比如用例B执行前，必须先执行A，则用例的前置条件是执行A。&lt;/li&gt;
      &lt;li&gt;事后状态(Post-Condition) - 用例执行完毕后系统可能处于的一组状态。&lt;/li&gt;
      &lt;li&gt;事件流(Flow of Event)&lt;/li&gt;
      &lt;li&gt;基本流程(Basic Flows) - 用户操作该用例的基本流程 (是后期时序图的主要参考)&lt;/li&gt;
      &lt;li&gt;选择性流程(Alternative Flows) - 在操作主要流程过程中，出现的一些分支流程 (是后期时序图的主要参考)&lt;/li&gt;
      &lt;li&gt;特别需求(Special Requirement) - 描述与该用例相关的非功能性需求。
        &lt;ul&gt;
          &lt;li&gt;包括性能、可靠性、可用性和可扩展性等和设计约束&lt;/li&gt;
          &lt;li&gt;所使用的操作系统、开发工具等&lt;/li&gt;
          &lt;li&gt;对一些细微功能点进行描述，比如用户身份验证规则、订单号码产生规则、是否需要SSL加密等等 。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;使用界面(User Interface) - 根据需求制作的UI，及其对UI中栏位进行的说明。&lt;/li&gt;
      &lt;li&gt;附加资讯(Addition Information) - 一些商务逻辑的描述 (可以把系统逻辑试图 Logic View 放到这里)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;基本流的描述一般按照这样的格式：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;每个步骤都有数字编号来表明它的先后顺序&lt;/li&gt;
  &lt;li&gt;每个步骤都有简短的标题来概括它的内容&lt;/li&gt;
  &lt;li&gt;每个步骤要详细描述参与者跟系统之间的交互，一般按照正反两个方面来描述
    &lt;ul&gt;
      &lt;li&gt;参与者向系统提交了什么信息&lt;/li&gt;
      &lt;li&gt;系统作出了什么反应&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;备选流除了包括基本流类似的描述外，还包括：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;起点：备选流从事件流的哪一步开始&lt;/li&gt;
  &lt;li&gt;条件：在什么条件下触发&lt;/li&gt;
  &lt;li&gt;动作：备选流下系统采取了哪些操作&lt;/li&gt;
  &lt;li&gt;恢复：备选流结束后，用例如何继续&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;什么情况下可以削产品经理&quot;&gt;什么情况下可以削产品经理&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;基本流程和选择性流程描述的不够清楚或者不够详细&lt;/li&gt;
  &lt;li&gt;基本流程描述中不能体现出明确的对象&lt;/li&gt;
  &lt;li&gt;其它事件流有遗漏&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为这属于他 &lt;strong&gt;对需求理解的不够透彻，分析的不够彻底。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;例子&quot;&gt;例子&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;名称&lt;/th&gt;
      &lt;th&gt;内容&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;用例名称&lt;/td&gt;
      &lt;td&gt;网站公告发布&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;用例标识号&lt;/td&gt;
      &lt;td&gt;202&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;参与者&lt;/td&gt;
      &lt;td&gt;负责人&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;基本描述&lt;/td&gt;
      &lt;td&gt;负责人用来填写和修改家教网站首页的公告，公告最终显示在家教网站的首页上。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;前置条件&lt;/td&gt;
      &lt;td&gt;负责人已经登陆家教网站管理系统&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;基本流程&lt;/td&gt;
      &lt;td&gt;1． 负责人鼠标点击“修改公告”按钮&lt;br /&gt;2． 系统出现一个文本框，显示着原来的公告内容&lt;br /&gt;3． 负责人可以在文本框上修改公告，也可以完全删除，重新写新的公告&lt;br /&gt;4． 负责人编辑完文本框，按“提交”按钮，首页公告就被修改&lt;br /&gt;5． 用例终止&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;选择性流程 A1&lt;/td&gt;
      &lt;td&gt;在按“提交”按钮之前，负责人随时可以按“返回”按钮，文本框的任何修改内容都不会影响网站首页的公告&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;异常流程&lt;/td&gt;
      &lt;td&gt;1． 提示错误信息，负责人确认&lt;br /&gt;2． 返回到管理系统主页面&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;事后状态&lt;/td&gt;
      &lt;td&gt;网站首页的公告信息被修改&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/ywqu/archive/2009/12/01/1614509.html&quot;&gt;如何书写Use Case&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/eddle/article/details/7038008&quot;&gt;对use case的一点理解&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/zfrong/article/details/3723141&quot;&gt;UML中的用例(Use Case)概念分析及StarUML实例&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wenku.baidu.com/view/80a9b2bffd0a79563c1e726b.html&quot;&gt;如何书写规范的Use Case描述文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;延伸阅读&quot;&gt;延伸阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/xiaolongbao-lzh/p/4590897.html&quot;&gt;UML建模 - 用例图&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/ywqu/archive/2009/12/03/1616232.html&quot;&gt;设计阶段如何画用例视图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 06 Jun 2017 11:30:00 +0000</pubDate>
        <link>http://the-wang.github.io/other/use-case/</link>
        <guid isPermaLink="true">http://the-wang.github.io/other/use-case/</guid>
        
        <category>scrum</category>
        
        
        <category>other</category>
        
      </item>
    
      <item>
        <title>Service Object</title>
        <description>&lt;h2 id=&quot;service-object-with-active_type&quot;&gt;Service Object with active_type&lt;/h2&gt;

&lt;h3 id=&quot;什么是-service-object&quot;&gt;什么是 Service Object&lt;/h3&gt;

&lt;p&gt;Service Object 是一个普通的 Ruby 对象，用于将业务逻辑分解为可管理的类和方法。&lt;/p&gt;

&lt;p&gt;因为和业务逻辑比较接近，Service Object 通常用在 Controller 中，但也可以单独使用（比如在 job ， console 或者其他 Service Object 中嵌套使用）。&lt;/p&gt;

&lt;h3 id=&quot;何时使用-service-object&quot;&gt;何时使用 Service Object&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;操作逻辑很复杂。（在会计期结束时关闭账本）&lt;/li&gt;
  &lt;li&gt;操作涉及到多个 model。（一个在线商城的 purchase 动作涉及到 Order, CreditCard 和 Customer 模型）&lt;/li&gt;
  &lt;li&gt;操作涉及到调用外部服务。（发送短信验证码）&lt;/li&gt;
  &lt;li&gt;操作不是 model 该关注的核心逻辑（比如定时清理过期数据）。&lt;/li&gt;
  &lt;li&gt;操作涉及到一系列不同的具体实现（比如用 token 认证或者 password 认证），策略模式就是干这个的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;convention-over-configuration&quot;&gt;Convention over Configuration&lt;/h3&gt;

&lt;p&gt;Convention 的意义在于，它就是一个最佳实践的表现形式，Rails 本质上是一系列 web 开发中最佳实践的集合体。遵循 Convention 的 Rails 项目都长得差不多，这使得 Rails 开发者的经验能够跨项目地重用，大家可以关注在商业逻辑目标上。&lt;/p&gt;

&lt;h3 id=&quot;基本原则-basic-principles&quot;&gt;基本原则 Basic principles&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;does only one thing and does it well (Unix philosophy)&lt;/li&gt;
  &lt;li&gt;can be run synchronously (i.e. blocking/in the foreground) or asynchronously (i.e. non-blocking/in the background)&lt;/li&gt;
  &lt;li&gt;can be configured as “unique”, meaning only one instance of it should be run at any time (including or ignoring parameters)&lt;/li&gt;
  &lt;li&gt;logs all the things (start time, end time, duration, caller, exceptions etc.)&lt;/li&gt;
  &lt;li&gt;has its own exception class(es) which all exceptions that might be raised inherit from&lt;/li&gt;
  &lt;li&gt;does not care whether certain parameters are objects or object IDs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;基于-active_type-实现&quot;&gt;基于 active_type 实现&lt;/h2&gt;

&lt;h3 id=&quot;约定-conventions&quot;&gt;约定 Conventions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Let your services inherit from &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationService&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Put your services in &lt;code class=&quot;highlighter-rouge&quot;&gt;app/services/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;文件以 &lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt; 结尾并能描述出功能。例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;app/services/memberships/become_collaborator_service.rb&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;文件继承 &lt;code class=&quot;highlighter-rouge&quot;&gt;app/services/application_service.rb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;abstract_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;after_save&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:perform&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NotImplementedError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Must be implemented by subtypes.'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;例子&quot;&gt;例子&lt;/h3&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/services/roles/become_admin_service.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BecomeAdminService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationService&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:forum_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:integer&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:integer&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:forum&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;validate&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:need_membership&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: :forum&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;has_role?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:moderator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;need_membership&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:need_membership&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BecomeAdminService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;forum: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@forum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;优势&quot;&gt;优势&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;跟其它的 Rails model 一样，利用 &lt;code class=&quot;highlighter-rouge&quot;&gt;validate&lt;/code&gt; 方法可以拿到 errors 信息&lt;/li&gt;
  &lt;li&gt;所有的业务逻辑都放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;perform&lt;/code&gt; 中，其它同事只需要关心这一个方法就行&lt;/li&gt;
  &lt;li&gt;方便测试&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;h3 id=&quot;articles&quot;&gt;articles&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ruby-china.org/topics/23892&quot;&gt;Service Object 整理和小结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/&quot;&gt;7 Patterns to Refactor Fat ActiveRecord Models&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.tutsplus.com/tutorials/service-objects-with-rails-using-aldous--cms-23689&quot;&gt;Service Objects With Rails Using Aldous&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.sundaycoding.com/blog/2014/11/25/my-take-on-services-in-rails/&quot;&gt;My take on services in Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gems&quot;&gt;gems&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nebulab/simple_command&quot;&gt;simple_command&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/krautcomputing/services&quot;&gt;services&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/envato/aldous&quot;&gt;aldous&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/andypike/rectify&quot;&gt;rectify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 04 Jun 2017 11:30:00 +0000</pubDate>
        <link>http://the-wang.github.io/rails/service-object/</link>
        <guid isPermaLink="true">http://the-wang.github.io/rails/service-object/</guid>
        
        <category>refactoring</category>
        
        
        <category>rails</category>
        
      </item>
    
  </channel>
</rss>
